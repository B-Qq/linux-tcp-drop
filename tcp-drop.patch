diff --git a/net/ipv4/tcp_ipv4.c b/net/ipv4/tcp_ipv4.c
index 22ef8bd..0a04258 100644
--- a/net/ipv4/tcp_ipv4.c
+++ b/net/ipv4/tcp_ipv4.c
@@ -1660,9 +1660,115 @@ out_kfree:
 	goto out;
 }
 
+static void tcp_drop_split(const char **s, int *len, __be16 *port)
+{
+	__be16 scale = 1;
+
+	while (*len > 0) {
+		char c = *(*s + --*len);
+		if (c == ':')
+			break;
+		if (c < '0' || c > '9')
+			continue;
+		*port += (c - '0') * scale;
+		scale *= 10;
+	}
+
+	if (*len >= 2 &&
+			**s == '[' && *(*s + *len - 1) == ']') 
+	{
+		++*s;
+		*len -= 2;
+	}
+}
+
+static int tcp_drop(const char *s, int len)
+{
+	const char *d;
+	__be16 sport = 0, dport = 0;
+	int slen = 0, dlen = 0;
+	struct sock *sk = NULL;
+	union {
+		__be32 v4;
+		struct in6_addr v6;
+	} saddr, daddr;
+
+	for(d = s; 
+		slen < len && !isspace(*d); 
+		++d, ++slen);
+
+	for(dlen = slen;
+		dlen < len && isspace(*d); 
+		++d, ++dlen);
+
+	dlen = len - dlen;
+
+	tcp_drop_split(&s, &slen, &sport);
+	tcp_drop_split(&d, &dlen, &dport);
+
+	if (in4_pton(s, slen, (u8*)&saddr.v4, '\0', NULL)
+	 && in4_pton(d, dlen, (u8*)&daddr.v4, '\0', NULL))
+	{
+		sk = inet_lookup(
+				&tcp_hashinfo,
+				daddr.v4, htons(dport), 
+				saddr.v4, htons(sport), 
+				0);
+
+	} else if (in6_pton(s, slen, (u8*)&saddr.v6, '\0', NULL)
+		&& in6_pton(d, dlen, (u8*)&daddr.v6, '\0', NULL))
+	{
+		sk = inet6_lookup(
+				&tcp_hashinfo,
+				&daddr.v6, htons(dport), 
+				&saddr.v6, htons(sport), 
+				0);
+	}
+
+	if (!sk) {
+		printk(KERN_INFO "tcp_drop: not found");
+		return -1;
+	}
+
+	printk(KERN_INFO "tcp_drop: dropping %.*s:%d %.*s:%d\n", 
+			slen, s, sport, dlen, d, dport);
+
+	if (sk->sk_state == TCP_TIME_WAIT) {
+		inet_twsk_deschedule(inet_twsk(sk), &tcp_death_row);
+		inet_twsk_put(inet_twsk(sk));
+	} else {
+		tcp_done(sk);
+		sock_put(sk);
+	}
+
+	return 0;
+}
+
+static int tcp_drop_write_proc(struct file *file, const char __user *buffer,
+	unsigned long count, void *data)
+{
+	ssize_t ret = -EFAULT;
+	char *kbuffer;
+
+	if (!count || count > 256)
+		return -EOVERFLOW;
+
+	kbuffer = (char *)kmalloc(count, GFP_KERNEL);
+	if (!kbuffer)
+		return ret;
+
+	if (!copy_from_user(kbuffer, buffer, count)
+		 && !tcp_drop(kbuffer, count))
+	{
+		ret = count;
+	}
+
+	kfree(kbuffer);
+	return ret;
+}
+
 int tcp_proc_register(struct tcp_seq_afinfo *afinfo)
 {
-	int rc = 0;
 	struct proc_dir_entry *p;
 
 	if (!afinfo)
@@ -1674,11 +1780,16 @@ int tcp_proc_register(struct tcp_seq_afinfo *afinfo)
 	afinfo->seq_fops->release	= seq_release_private;
 	
 	p = proc_net_fops_create(afinfo->name, S_IRUGO, afinfo->seq_fops);
-	if (p)
-		p->data = afinfo;
-	else
-		rc = -ENOMEM;
-	return rc;
+	if (!p)
+		return -ENOMEM;
+	p->data = afinfo;
+
+	p = create_proc_entry("tcp_drop", S_IWUSR | S_IWGRP, proc_net);
+	if (!p)
+		return -ENOMEM;
+	p->write_proc = tcp_drop_write_proc;
+
+	return 0;
 }
 
 void tcp_proc_unregister(struct tcp_seq_afinfo *afinfo)
@@ -1687,6 +1798,7 @@ void tcp_proc_unregister(struct tcp_seq_afinfo *afinfo)
 		return;
 	proc_net_remove(afinfo->name);
 	memset(afinfo->seq_fops, 0, sizeof(*afinfo->seq_fops)); 
+	remove_proc_entry("tcp_drop", proc_net);
 }
 
 static void get_openreq4(struct sock *sk, struct request_sock *req,
